package com.github.btclib;

import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.junit.Assert;
import org.junit.Test;

public class Base58CheckTest {
  @Test
  public void test_decode() {
    final Map<String, String> testVectors = new OneShotLinkedHashMap<>();
    testVectors.put(null, null);
    testVectors.put(new String(new char[5601]), null);
    testVectors.put("", "invalid checksum");
    testVectors.put("1", "invalid checksum");
    testVectors.put("121", "invalid checksum");
    testVectors.put("3QJmnh", "");
    testVectors.put("1Wh4bh", "00");
    testVectors.put("dogsbark", "checksum failure");
    testVectors.put("‚õè", "invalid symbol found"); // code point 0x26cf within the Unicode Basic Multilingual Plane (BMP)
    testVectors.put("üòé", "invalid symbol found"); // code point 0x1f60e not within the Unicode Basic Multilingual Plane (BMP)
    testVectors.put("‚ò∫1Wh4bh", "invalid symbol found"); // code point 0x263a within the Unicode Basic Multilingual Plane (BMP)
    testVectors.put("01Wh4bh", "invalid symbol found"); // zero is not in the Base58Check symbol set
    testVectors.put("BXvDbH", "01");
    testVectors.put("VrZDWwe", "ff");
    testVectors.put("7VsrQCP", "39");
    testVectors.put("7ZRwjEn", "3a");
    testVectors.put("112edB6q", "0000");
    testVectors.put("18AV53K", "0001");
    testVectors.put("VvpVbFE", "0100");
    testVectors.put("W3FewuX", "0101");
    testVectors.put("1VpBd9rE", "00ff");
    testVectors.put("17W4smkQ", "0039");
    testVectors.put("17befNKF", "003a");
    testVectors.put("1111", "checksum failure");
    //
    testVectors.put("1111111111111111111114oLvT2", "000000000000000000000000000000000000000000"); // version 0 + 20 zero bytes (size of hash160)
    testVectors.put("1QLbz7JHiBTspS962RLKV8GndWFwi5j6Qr", "00ffffffffffffffffffffffffffffffffffffffff"); // version 0 + 20 0xff bytes (size of hash160)
    testVectors.put("1X9K92G8rUa3", "00b4371442"); // sha256d of this value has four leading zero bytes, thus the computed checksum is zero
    testVectors.put("111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111114w6D", new String(new char[193 * 2]).replace('\0', '0')); // version 0 + 192 zero bytes results in checksum with one leading zero
    testVectors.puto5QxD", new String(new char[4096 * 2]).replace('\0', '0')); // max allowable length
    testVectors.put("3F17WME3gTqVTn9uW9Y15YCP4K3BknqKEUXVSYVDSncHp1ndfGZeRkTzZkb9rDyyEczAUf9jHoqJbc2bQ5oiDyNFk1U3ByQz49YdPL7yvzKkWQx8aHSCSbsycbbeP7ddjELnM41aMo9aBPLxbmypgxK85Mycq7cxDnipGzYiWuEzhVk3Y8omiypX9tEos7aQCxMjQkSDiMJVTK291xo2WpPkpQvTM5jxPq7aGjtMsquzvYhJwWdCsU6Hwxc8tguLw6ZSn4kDRnvaR3yd9UAdT4B6toV5T2hWkHzBqec2k6qJZxXD7Ep8x7ZLXL3Z9aaDzw7aaR1TVxEd5nVsRorCatnyq5DbUtcQCysupQBqr3d4jFKdYWzqEo6SMSgDC2grTWQ7CdJoH4XXj97CerDnbqhNo4YRwVbb6BLKV5WEFcYWqZpNP1Z82mHe1tdmVKuzESXKBxtKcmM8TCv6vLCiqz4sgNmCnL6iEmizdXMfQiMLyDFNJMZchFjLyvWwQVFg3VQWJUaes3CQA4aKh8Hfp9NLv7xRzuk1LN3CEbHmmzhJcUijFYCkoCewKF3WauQ5oqSWN76DH88tG2v2LpQkXpZzZFTM4t4RmvupqrHYkWWdG1o8BZUpeCKHhoX3nQeRQewarVXi8HLEfgZtZ6wEYLEHrBjXjqSfEHvyZYUGXfYzWe4ZitrCiEsV8UsSw6ZW6wZhCDYQwGFaXtXDaYk8SR3cGzo68KxGmSNdVfeAiJWNrkowVgZB9Tq5WCwswbXCx7CNHVbogWXdUbovhaacdN3tLqrPHhPSPo7zsjbqf2WZBNBJRYce1UA1qZ1meZGk4aUrj314kNRR7acnjEzpVnPycin2hjH3xyBgtZr69fgAL8cGHjob3WPDTRvhtLWjnzubFTrkP18uPnq6o2ZkzHLpRb4RQu6vUcnKWt5sJdNGu1WSc42azja9GoCMXMhvM8zKUVC6JGuEX9df5qjtWhrNPn2eD4xn82MY4yDjnvM6vR5roEL1LFR1n8Bp4GnR6tfywbifQkDUbbk7b6thFwxseBkSbphsBGNETxyYWJYc25Rtf3o9PAywdHKczH1ABUjms77EQovRk2aYb1RfLVpwkWycjBEEpjyCb6g8aiEZyYEkgtBZP9NPPZnQu1vZodAjuj9GEnSL9PKzRDkRdKiei7wwa8HQ1SYhSGRpktXjjGH6eYYFg1seF1HSGgYyxejrf3YiS7hyQKu14d22cRJp5XtTs1ePou4ipsqSfLS4HWNd5DzZ5sSPbUUC2NM3MuT15BBEAryBDK6XFJcNR6NcyJrRUinDjsNxD1NNfejspoTSNwfE72nrj6wVTxQbD23S9L6nfV93PaaEk9gFtHKA2qQmDTNcYFSYJVGHonW3s3LiqL9KAvTTAagv6eMbi3Tt1XuASGvaFw1cG4kizDedrdzRBUpHmQ61zCct1c7es2szRDLG78kRGfWQNs1ZQT4YJiHNcNJXCkgiERrUgcmK6EHogHubkp3de4YbsK9BXD5VUhjLYsopftz6WuyycLWn3LRCvZgqzxb3avaFtjeCfzEZt1F5kjtMo23SKNuMmgUDckzxVsE4YdjJeHZT7MUWx91ZmnZsWxUyJ3qZRm67KoTA3sqTHkJeQxYXy5momzVcaWYuAHfuHnvTkMC8CC5wEzwpzj3vY21EA4DvYcagWzF4YrToLRhcqaDkWsZEMVd4wyHmwfapA5qHKawk6rUHhrs7CC5t2ssmfkVAYufJD38vyW12W5hCp6Jmgo1kjGZb7yZDigUC6g2t37HEypVBo1iEApBVJLLeyUaoY4fB1hLcWmX8SsGKu6pfymBDjJKfHxuJFURB3P53ekPz4SJzyPnw22NPzVcQsMCc4J4NFVZRrb6jzER2TUmzWjs4tt75LsETcdkU2EFaG4yiVAiYxU4iErR8PEni34bZsCuqHW5HHuqeHhM3kjSFokNuDYAWjBhM3k97vXsRtmVj1crbx8e4Z25tktgz8nzBGtHiy8rnoWYkEJvq8aSe9ZZmVXPbhcjiBoUKkWjMwiWe6AMnktsqw1TpH6kRBpPdCFxsvY4LhJb7fYk9wsFo7CkNr9gwMMQTvpzUzsNjXsB987J2S71XqCrNsUDLpuju2vSa8wugrL15CUXcTTK7Xvj6Be9yY58vj6Vd75uWcC25cdgL5TMYMH4iNcg1nD2FBpBKKTwZwQCQSwzbJJ2z9QceyPi9BABHjYoWrTbfomJ6woRSap1ax9QnrwcSjjNDf9zwq7YsJcJfLR4GSMWj3Jf4EsDp8faAoQyxbZGiBJXJfDcrQHfgMP8iTTMunbvvxiP9DwCraoxuiuofbVR5vWNjxJkaYWLUvt8V95T3sJsVCBw33ToUnnBshmRW33wSjqHvREQEACZRsPPudjw762FGc4XhtwicNEPSzewf2182uhaFsfcT5bkqNCurxbKmzSGdfKK7YFV8u2JFnhGWQ9KReBQzJ4ZvpYwuXPhX9mMcobskfhD5bKw61XX7oVvqVCEw4diGM3RHDwWxf9isPWPBujviMzkAcQhNS5GmzHZ6vLLL3tbDCJ7pr6TLHPgdpRV3zwTngRUuokYciLRgZaFBHJNWq32fmZ6ud8g9GTVgGWN4aV4apF1KmivouQ2b9YtxamGB7W6bxYiA6b5UnBbPS7rGaAVxrSQPc99j3cQLpEf4JG7bx1YzLqHUDFNZ4b7H6N9ef1uoVpMxyb5ZztirUtWTBZh8P89kQw2mNjesqQwiEG8j6ESqSWYXVM5K7jdJP2i4ASDp5iuZFnmTrvrrzz2A3gW7hGfqDQ3bmgM5M2ZNzkBqrQPYmxtL3th8CRzu4suWQkUtm9nm9D3Rfd7GhTwRzoMcBSiEgAVVwbDt2iVh2cwpThupjZzkjeHcmrZKJLaUVoWJxvgFAhWngmYXTUYs2bvktiF6rZhYg7DYx29FB4eMW1QgAkFZoiPYjqxwGjfAzuN9mFxDYzYDapLxWSwDomBikrEreGZUTE5aj2ZmADFjF93q1qF5pSa87VzJuTPFghiycuMrUEuyBhDcc72qofNniAvDKLp8ymf3a6H4sGNjHPDdut6N3en1sQcRkUzxa6r6zJUnFoi9VFe5Vh46Wv6ErpeR9q7h8fzztQkWoahd9NbPpeSBUic6oocdDyx7ndZsjxsyMkFLexqVsgJFsNkRnV6JcN46cBYgyuXBL1MEmeGkKUGwrKft178NwGrAjGZ5PLzxMEVYjSjeDJdvAwxFBDn68zmFMKTT4xVjQEWcgzghQ4AckrSfUWnUB3FjwdtjdnK7nKGdhisrToMgvGHNho7FYhHHYyqgvfFGqZSeuBfRUwd6Q8ttB5ifVacYpyRvPN4SvufDQC7fsxGv1aHWN8HK48Bks6J2FqhAHuAW93fU7cwsUH6r6nBbmbDgVcSJhJjy9HNQW35uRoPxipM1NLqzAKxtJjuX8enj39TX5uvJzeWZ4yUFUQzXvv3cAsAay8YsQpihpT3ATatwdCtBgZuNJmA6QRnZZFkvG17uUgCMN5LpHfCvATnUXXqkEVJmSU7mtTpV53qiLCF8BCVcuYbb9Pc7CMHnZjkkrSA914D8Gm7cQCTgu9LxuQRSxLX5X2pvBdn1DPkoY8jYcHfbmZKzhkn6GLX5DfiBXRBVjyai5aNfpxAh9qYhzw66PoE2jZCMEbxMjWJHpFDKNxDJdZtJhXTdHMi5wFTon6ondU1bpPqtuDsuCWQ2Mmx6s5ZAHZEYBgGJhSshGs96srrmqag6WgSNoLYgiZZQfurRZHE6XSSYAsWucKxr9GVJcJGtF8pvHZsSzKmyCmCn2yFrCRYqpGiPLncQmZm1f31KSd5baYqmJeGPPqUkM9tyFKwot1Pec5DSXQ6bHvf2oRGYj9aqk1s9nDBkeTJwKgoGSdsyZbJHTsw55NhZSB2NAqzXux1b7zkPcjTey1koVpuyFjcFTn8k3GPV6AjCdjeajFwJQGP3cM5ErVHYbeMwTKoShBkn1UXG1rM6Wcuw1CAcumKjbuThySkKZX2UoRNShsDCdVevQRu6R7rVhkoF372HfZ4JuJSt9okeWxPzAiXreJgUtbMxKDmRuL3GBLEdyF6KZYinKCDW6DTU12FkbJnb8ApRUF2GNrQ3R9JG3Sxm9NKNMvLuLWbwLsfgRHjqS82F32fW25nwx1XNRMHdxxr7DnLncNihECr3wDda6MdmqC48iKVWK2oPdQHoPQLcqKAUTz4bGz5Yc81znTLKh9LRoGhqXqfvzQkNjzL7qAewcCDkwAUc52ngxzYJkF1LrmpPqt7M9q5gLSZJVNJeVbzd2VtcqkQQzGvfxRGPZqewQFjSS3VrGjNqcfb9z2WQiHa8G9o5dbr7SEfVmMBj9VxojYpcSivDXsn1CLZYSJjp2fns8kK4xfiEmM8dMtFHPZoUyRPCZnHipRcCciKzFohLNX859GJ25UaR1eX1zucobb8P2q1UYGkbKf2K33HP89sjhPrSuQx3mWePMbSRP1ustAUcYpBL9yMqkQLXCupHpNXcWaGtSyJNzEaCe77ku8pR5fnR4VbS2U9B5N2AfuLBWfHDY17iQdbuQpZbEX1W5ZWDfEnvggZU9GhLF2pjjSZntgt5Htf2uHgpzfNpjyGhEXTRMb47fiXoULvnX4jK3gequM33mdTycxGppo5RH1rouFcpBii8Bkd4mCLy8m1aeDq6zJYfukXc5YjjiMBwC15AE8C1ZZJY14y8HUgrG6QFzcW3ZJaQj15rcRozmQto86kuYWaNktVKskq5VxqzEuKY5dS3hdNZs7a8eFYKVndkzC7HeGz6FnKM7Ywk7Rp573q15QDMXpSE96nhV4n9yY1jAwBVZjX8JA78389hPCjC2ksyaLu92qAn89zryGaaQp6E3gYKDnGn2GDnABmfdFJvvTBjbnixLkGHpemjfcJ48ndomYQQE5m9diQjm95tY8DqHrViQijzzK9xBUBgSDesrj5hHsftqhvwW6n7XHRHPNoZkKvGYZ7cN5cmbK7up2BnzWfTPAtg7qXhzinn7pyWdeskfBTpNe5vReDfMCxncHyR5yDHELnXdRjCYGaorgJZwp6khgT1Wj1xU5mib3RbjzMtW6QQ5VMPpj7LLXcVNvTJexeTi4nYZG2NvMDPSzgEwPh3XKX9V7YpB8vCj5vts3phqBCtELjbpkU6NeQfxDCdwkx9KfowAnD9ni7ihG4nypsg7P4sgk1PBKkEf7tkyY1dGK2Gz82fZ6yuN31kqe7N6NagE4qwhD5Yis652fuoCxmojMEEGXjUKXrnnkHn5hDcRmetRHH6UuyHYu4STKNSgDBu83T2RQqT6xFXHSP57Ma5Mk8uWQKVzXVMJHpgQKpfVdeNm6Txh2RvLQo5vqQK7VmRy9mmt4HtFPKYn478scErdrohfaLtBUWBqF6bqowwBGoHNKB45n66Xvaq6ujN7Msgjq6RB4a7DzKbE7AxzCgLHPr4Dn9objW5ysCP7hxfyDSAHWFRbaigBov9iGnKvifZjHeMQJ7GWXwjdZiFTnaDw7jeSpUrUeY6S7fgWNNoqCd4BfLnLcpVN7XQ7BEHjr36p5W1PkJ76hij", new String(new char[4096 * 2]).replace('\0', 'f')); // max allowable length with all bits set
    //
    testVectors.put("18TktBbxTJxGjKnN25xLXGmqVRutGRcWUW", "0051d853a46c1e4e5490d774e4c6ead143168ecaf6"); // main net p2pkh compressed (generated key)
    testVectors.put("12wr1YsbCnj3U5PyrMXZ87ZX6GkVhBeXV4", "0015577faf5ac933c1c48f15f04db35e1707e02986"); // main net p2pkh uncompressed
    testVectors.put("L5hNLtFov4mXzqToWDnvK64UJPGaBLaF7zbgLG6HAaEpCE2PRyvH", "80fced6d7a8592042fcf2bd1ded8d0fa559c6de95668b60a9d4537e321607654da01"); // main net private key compressed
    testVectors.put("5KjgGqKJszVfk1ZMWH3FLxXEtWy6FaSCou24UUSDGmEYzUTFTDD", "80fced6d7a8592042fcf2bd1ded8d0fa559c6de95668b60a9d4537e321607654da"); // main net private key uncompressed
    testVectors.put("33hXUE8YFazwf4vscckfBh7FNwWXGeEH5R", "051608ea6163a45501c5ab6b1f40d8c30a81347bd2"); // main net p2sh (p2sh-segwit of previous key)
    //
    testVectors.put("113jiYt8VVPsKoiTj7pNJn4xezbwCzzSnn", "0000847d60b26f3243df1dc2c22087b6f270e4680e"); // main net p2pkh compressed (generated key with a leading zero in one of its public key hashes)
    testVectors.put("1ANG4YQnQBNwRXJDHpTVV9gd7JGFWgXDU5", "0066be7089201685a69d3dd11bb864ee42608b2ee0"); // main net p2pkh uncompressed
    testVectors.put("L34yCT7grP6jekoFcPVGueCHouxc4idoSh5FBzSTRqeCAyWh2g3Y", "80ae871112a654ad2b0062e9c4627badb2bc782e3f9a425d7b360a0305d1d7e32101"); // main net private key compressed
    testVectors.put("5K99ewQGNcNEjzW4JzCqvALKmAHDvrm8obucqi7DnW9RjhNZJvY", "80ae871112a654ad2b0062e9c4627badb2bc782e3f9a425d7b360a0305d1d7e321"); // main net private key uncompressed
    testVectors.put("35QXKEY1mxrPgjg3zJaAANjnjA8aRseTCJ", "0528c1f761b60df6771e6906082f598b01492d4dcd"); // main net p2sh (p2sh-segwit of previous key)
    //
    testVectors.put("1BgGZ9tcN4rm9KBzDn7KprQz87SZ26SAMH", "00751e76e8199196d454941c45d1b3a323f1433bd6"); // main net p2pkh compressed (smallest valid private key)
    testVectors.put("1EHNa6Q4Jz2uvNExL497mE43ikXhwF6kZm", "0091b24bf9f5288532960ac687abb035127b1d28a5"); // main net p2pkh uncompressed (smallest valid private key)
    testVectors.put("KwDiBf89QgGbjEhKnhXJuH7LrciVrZi3qYjgd9M7rFU73sVHnoWn", "80000000000000000000000000000000000000000000000000000000000000000101"); // main net private key compressed (smallest valid private key)
    testVectors.put("5HpHagT65TZzG1PH3CSu63k8DbpvD8s5ip4nEB3kEsreAnchuDf", "800000000000000000000000000000000000000000000000000000000000000001"); // main net private key uncompressed (smallest valid private key)
    testVectors.put("3JvL6Ymt8MVWiCNHC7oWU6nLeHNJKLZGLN", "05bcfeb728b584253d5f3f70bcb780e9ef218a68f4"); // main net p2sh (p2sh-segwit of smallest valid private key)
    //
    testVectors.put("1GrLCmVQXoyJXaPJQdqssNqwxvha1eUo2E", "00adde4c73c7b9cee17da6c7b3e2b2eea1a0dcbe67"); // main net p2pkh compressed (largest valid private key)
    testVectors.put("1JPbzbsAx1HyaDQoLMapWGoqf9pD5uha5m", "00bec08011c9e76dcc42e739a2d7752c2e3ac86e6e"); // main net p2pkh uncompressed (largest valid private key)
    testVectors.put("L5oLkpV3aqBjhki6LmvChTCV6odsp4SXM6FfU2Gppt5kFLaHLuZ9", "80fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414001"); // main net private key compressed (largest valid private key)
    testVectors.put("5Km2kuu7vtFDPpxywn4u3NLpbr5jKpTB3jsuDU2KYEqetqj84qw", "80fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140"); // main net private key uncompressed (largest valid private key)
    testVectors.put("38Kw57SDszoUEikRwJNBpypPSdpbAhToeD", "0548cc1845ab9f5099d4b36f02e148f7459d439fee"); // main net p2sh (p2sh-segwit of largest valid private key)
    //
    testVectors.put("xprv9s21ZrQH143K24Mfq5zL5MhWK9hUhhGbd45hLXo2Pq2oqzMMo63oStZzF93Y5wvzdUayhgkkFoicQZcP3y52uPPxFnfoLZB21TeqtDeZVxb", "0488ade40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"); // main net bip32 extended private key
    testVectors.put("xpub661MyMwAqRbcEYS8w7XLSVeEsBXy79zSzH1J8vCdxAZningWLdN3zgtU6QzvJsNBNF5QPBBBg1yVF2LKrcfGdJq86PeLWDMUCYatZPzQu8R", "0488b21e00000000000000000000000000000000000000000000000000000000000000000000000000000000000279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"); // main net bip32 extended public key
    //
    testVectors.put("mnyiBEgwGLPXWSFyjeviMBzAMRWbCEDgnF", "6f51d853a46c1e4e5490d774e4c6ead143168ecaf6"); // test net p2pkh compressed (generated key)
    testVectors.put("mhToJbxa1pAJFBsbZvVvx2mqxGMCeJhFvL", "6f15577faf5ac933c1c48f15f04db35e1707e02986"); // test net p2pkh uncompressed
    testVectors.put("cW4MooFfM8ToAGw4tdc3gQZXvcZyqnfwC2k9SgYnfgtpSy6ULzFk", "effced6d7a8592042fcf2bd1ded8d0fa559c6de95668b60a9d4537e321607654da01"); // test net private key compressed
    testVectors.put("93WJra8rUDZoi54e8cwADZ5CYBKoQjyQ9qt1Z6nicVybmQxBSJ3", "effced6d7a8592042fcf2bd1ded8d0fa559c6de95668b60a9d4537e321607654da"); // test net private key uncompressed
    testVectors.put("2MuFjXy4Zs3WHrrZRHkNXoe6WbHihAUejNJ", "c41608ea6163a45501c5ab6b1f40d8c30a81347bd2"); // test net p2sh (p2sh-segwit of previous key)
    //
    testVectors.put("mfZh1by7JWq86vC5Sgnk8hHHWzCeAtGetv", "6f00847d60b26f3243df1dc2c22087b6f270e4680e"); // test net p2pkh compressed (generated key with a leading zero in one of its public key hashes)
    testVectors.put("mptDMbVmDCpCCdmq1PRsK4twyHrxT7hosu", "6f66be7089201685a69d3dd11bb864ee42608b2ee0"); // test net p2pkh uncompressed
    testVectors.put("cTRxfN7YHSnzpCGWzoJQGxhMS9G1jAjVWjDiJQtxvxJCRiaJxbt4", "efae871112a654ad2b0062e9c4627badb2bc782e3f9a425d7b360a0305d1d7e32101"); // test net private key compressed
    testVectors.put("92unEgDoxqSNi41LwL6knktHQpdw62JL9YmZvLTj8EtUWfz518j", "efae871112a654ad2b0062e9c4627badb2bc782e3f9a425d7b360a0305d1d7e321"); // test net private key uncompressed
    testVectors.put("2MvxjNyU3PRMjtXJbfSC2nKj3wWLk8WUyh5", "c428c1f761b60df6771e6906082f598b01492d4dcd"); // test net p2sh (p2sh-segwit of previous key)
    //
    testVectors.put("mrCDrCybB6J1vRfbwM5hemdJz73FwDBC8r", "6f751e76e8199196d454941c45d1b3a323f1433bd6"); // test net p2pkh compressed (smallest valid private key)
    testVectors.put("mtoKs9V381UAhUia3d7Vb9GNak8Qvmcsme", "6f91b24bf9f5288532960ac687abb035127b1d28a5"); // test net p2pkh uncompressed (smallest valid private key)
    testVectors.put("cMahea7zqjxrtgAbB7LSGbcQUr1uX1ojuat9jZodMN87JcbXMTcA", "ef000000000000000000000000000000000000000000000000000000000000000101"); // test net private key compressed (smallest valid private key)
    testVectors.put("91avARGdfge8E4tZfYLoxeJ5sGBdNJQH4kvjJoQFacbgwmaKkrx", "ef0000000000000000000000000000000000000000000000000000000000000001"); // test net private key uncompressed (smallest valid private key)
    testVectors.put("2NAUYAHhujozruyzpsFRP63mbrdaU5wnEpN", "c4bcfeb728b584253d5f3f70bcb780e9ef218a68f4"); // test net p2sh (p2sh-segwit of smallest valid private key)
    //
    testVectors.put("mwNHVpaPLqQZJgrv8CpFhJ4GpvJGumskXi", "6fadde4c73c7b9cee17da6c7b3e2b2eea1a0dcbe67"); // test net p2pkh compressed (largest valid private key)
    testVectors.put("mxuZHex9m2jEMKtR3vZCLC2AX9QuyLzj7L", "6fbec08011c9e76dcc42e739a2d7752c2e3ac86e6e"); // test net p2pkh uncompressed (largest valid private key)
    testVectors.put("cWALDjUu1tszsCBMjBjL4mhYj2wHUWYDR8Q8aSjLKzjkW5eBtpzu", "effffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414001"); // test net private key compressed (largest valid private key)
    testVectors.put("93XfLeifX7KMMtUGa7xouxtnFWSSUyzNPgjrJ6Npsyahfqjy7oJ", "effffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140"); // test net private key uncompressed (largest valid private key)
    testVectors.put("2Myt98rNFVTJpSWNycRz4Svoeez2kzgwFGP", "c448cc1845ab9f5099d4b36f02e148f7459d439fee"); // test net p2sh (p2sh-segwit of largest valid private key)
    //
    testVectors.put("tprv8ZgxMBicQKsPcsbCVeqqF1KVdH7gwDJbxbzpCxDUsoXHdb6SnTPYxdwSAKDC6KKJzv7khnNWRAJQsRA8BBQyiSfYnRt6zuu4vZQGKqgeFia", "043583940000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"); // test net bip32 extended private key
    testVectors.put("tpubD6NzVbkrYhZ4WLczPJWReQycCJdd6YVWXubbVUFnJ5KgU5MDQrD998ZJLT5hqNKRA9cJzkh4D7oXwCpwFUWWWkHR9zPeBk1hnWBJKNhyYsn", "043587cf00000000000000000000000000000000000000000000000000000000000000000000000000000000000279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"); // test net bip32 extended public key
    // these test vectors copied from Bitcoin Core /bitcoin/src/test/data/base58_keys_valid.json
    testVectors.put("1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62i", "0065a16059864a2fdbc7c99a4723a8395bc6f188eb");
    testVectors.put("3CMNFxN1oHBc4R1EpboAL5yzHGgE611Xou", "0574f209f6ea907e2ea48f74fae05782ae8a665257");
    testVectors.put("mo9ncXisMeAoXwqcV5EWuyncbmCcQN4rVs", "6f53c0307d6851aa0ce7825ba883c6bd9ad242b486");
    testVectors.put("2N2JD6wb56AfK4tfmM6PwdVmoYk2dCKf4Br", "c46349a418fc4578d10a372b54b45c280cc8c4382f");
    testVectors.put("5Kd3NBUAdUnhyzenEwVLy9pBKxSwXvE9FMPyR4UKZvpe6E3AgLr", "80eddbdc1168f1daeadbd3e44c1e3f8f5a284c2029f78ad26af98583a499de5b19");
    testVectors.put("Kz6UJmQACJmLtaQj5A3JAge4kVTNQ8gbvXuwbmCj7bsaabudb3RD", "8055c9bccb9ed68446d1b75273bbce89d7fe013a8acd1625514420fb2aca1a21c401");
    testVectors.put("9213qJab2HNEpMpYNBa7wHGFKKbkDn24jpANDs2huN3yi4J11ko", "ef36cb93b9ab1bdabf7fb9f2c04f1b9cc879933530ae7842398eef5a63a56800c2");
    testVectors.put("cTpB4YiyKiBcPxnefsDpbnDxFDffjqJob8wGCEDXxgQ7zQoMXJdH", "efb9f4892c9e8282028fea1d2667c4dc5213564d41fc5783896a0d843fc15089f301");
    testVectors.put("1Ax4gZtb7gAit2TivwejZHYtNNLT18PUXJ", "006d23156cbbdcc82a5a47eee4c2c7c583c18b6bf4");
    testVectors.put("3QjYXhTkvuj8qPaXHTTWb5wjXhdsLAAWVy", "05fcc5460dd6e2487c7d75b1963625da0e8f4c5975");
    testVectors.put("n3ZddxzLvAY9o7184TB4c6FJasAybsw4HZ", "6ff1d470f9b02370fdec2e6b708b08ac431bf7a5f7");
    testVectors.put("2NBFNJTktNa7GZusGbDbGKRZTxdK9VVez3n", "c4c579342c2c4c9220205e2cdc285617040c924a0a");
    testVectors.put("5K494XZwps2bGyeL71pWid4noiSNA2cfCibrvRWqcHSptoFn7rc", "80a326b95ebae30164217d7a7f57d72ab2b54e3be64928a19da0210b9568d4015e");
    testVectors.put("L1RrrnXkcKut5DEMwtDthjwRcTTwED36thyL1DebVrKuwvohjMNi", "807d998b45c219a1e38e99e7cbd312ef67f77a455a9b50c730c27f02c6f730dfb401");
    testVectors.put("93DVKyFYwSN6wEo3E2fCrFPUp17FtrtNi2Lf7n4G3garFb16CRj", "efd6bca256b5abc5602ec2e1c121a08b0da2556587430bcf7e1898af2224885203");
    testVectors.put("cTDVKtMGVYWTHCb1AFjmVbEbWjvKpKqKgMaR3QJxToMSQAhmCeTN", "efa81ca4e8f90181ec4b61b6a7eb998af17b2cb04de8a03b504b9e34c4c61db7d901");
    testVectors.put("1C5bSj1iEGUgSTbziymG7Cn18ENQuT36vv", "007987ccaa53d02c8873487ef919677cd3db7a6912");
    testVectors.put("3AnNxabYGoTxYiTEZwFEnerUoeFXK2Zoks", "0563bcc565f9e68ee0189dd5cc67f1b0e5f02f45cb");
    testVectors.put("n3LnJXCqbPjghuVs8ph9CYsAe4Sh4j97wk", "6fef66444b5b17f14e8fae6e7e19b045a78c54fd79");
    testVectors.put("2NB72XtkjpnATMggui83aEtPawyyKvnbX2o", "c4c3e55fceceaa4391ed2a9677f4a4d34eacd021a0");
    testVectors.put("5KaBW9vNtWNhc3ZEDyNCiXLPdVPHCikRxSBWwV9NrpLLa4LsXi9", "80e75d936d56377f432f404aabb406601f892fd49da90eb6ac558a733c93b47252");
    testVectors.put("L1axzbSyynNYA8mCAhzxkipKkfHtAXYF4YQnhSKcLV8YXA874fgT", "808248bd0375f2f75d7e274ae544fb920f51784480866b102384190b1addfbaa5c01");
    testVectors.put("927CnUkUbasYtDwYwVn2j8GdTuACNnKkjZ1rpZd2yBB1CLcnXpo", "ef44c4f6a096eac5238291a94cc24c01e3b19b8d8cef72874a079e00a242237a52");
    testVectors.put("cUcfCMRjiQf85YMzzQEk9d1s5A4K7xL5SmBCLrezqXFuTVefyhY7", "efd1de707020a9059d6d3abaf85e17967c6555151143db13dbb06db78df0f15c6901");
    testVectors.put("1Gqk4Tv79P91Cc1STQtU3s1W6277M2CVWu", "00adc1cc2081a27206fae25792f28bbc55b831549d");
    testVectors.put("33vt8ViH5jsr115AGkW6cEmEz9MpvJSwDk", "05188f91a931947eddd7432d6e614387e32b244709");
    testVectors.put("mhaMcBxNh5cqXm4aTQ6EcVbKtfL6LGyK2H", "6f1694f5bc1a7295b600f40018a618a6ea48eeb498");
    testVectors.put("2MxgPqX1iThW3oZVk9KoFcE5M4JpiETssVN", "c43b9b3fd7a50d4f08d1a5b0f62f644fa7115ae2f3");
    testVectors.put("5HtH6GdcwCJA4ggWEL1B3jzBBUB8HPiBi9SBc5h9i4Wk4PSeApR", "80091035445ef105fa1bb125eccfb1882f3fe69592265956ade751fd095033d8d0");
    testVectors.put("L2xSYmMeVo3Zek3ZTsv9xUrXVAmrWxJ8Ua4cw8pkfbQhcEFhkXT8", "80ab2b4bcdfc91d34dee0ae2a8c6b6668dadaeb3a88b9859743156f462325187af01");
    testVectors.put("92xFEve1Z9N8Z641KQQS7ByCSb8kGjsDzw6fAmjHN1LZGKQXyMq", "efb4204389cef18bbe2b353623cbf93e8678fbc92a475b664ae98ed594e6cf0856");
    testVectors.put("cVM65tdYu1YK37tNoAyGoJTR13VBYFva1vg9FLuPAsJijGvG6NEA", "efe7b230133f1b5489843260236b06edca25f66adb1be455fbd38d4010d48faeef01");
    testVectors.put("1JwMWBVLtiqtscbaRHai4pqHokhFCbtoB4", "00c4c1b72491ede1eedaca00618407ee0b772cad0d");
    testVectors.put("3QCzvfL4ZRvmJFiWWBVwxfdaNBT8EtxB5y", "05f6fe69bcb548a829cce4c57bf6fff8af3a5981f9");
    testVectors.put("mizXiucXRCsEriQCHUkCqef9ph9qtPbZZ6", "6f261f83568a098a8638844bd7aeca039d5f2352c0");
    testVectors.put("2NEWDzHWwY5ZZp8CQWbB7ouNMLqCia6YRda", "c4e930e1834a4d234702773951d627cce82fbb5d2e");
    testVectors.put("5KQmDryMNDcisTzRp3zEq9e4awRmJrEVU1j5vFRTKpRNYPqYrMg", "80d1fab7ab7385ad26872237f1eb9789aa25cc986bacc695e07ac571d6cdac8bc0");
    testVectors.put("L39Fy7AC2Hhj95gh3Yb2AU5YHh1mQSAHgpNixvm27poizcJyLtUi", "80b0bbede33ef254e8376aceb1510253fc3550efd0fcf84dcd0c9998b288f166b301");
    testVectors.put("91cTVUcgydqyZLgaANpf1fvL55FH53QMm4BsnCADVNYuWuqdVys", "ef037f4192c630f399d9271e26c575269b1d15be553ea1a7217f0cb8513cef41cb");
    testVectors.put("cQspfSzsgLeiJGB2u8vrAiWpCU4MxUT6JseWo2SjXy4Qbzn2fwDw", "ef6251e205e8ad508bab5596bee086ef16cd4b239e0cc0c5d7c4e6035441e7d5de01");
    testVectors.put("19dcawoKcZdQz365WpXWMhX6QCUpR9SY4r", "005eadaf9bb7121f0f192561a5a62f5e5f54210292");
    testVectors.put("37Sp6Rv3y4kVd1nQ1JV5pfqXccHNyZm1x3", "053f210e7277c899c3a155cc1c90f4106cbddeec6e");
    testVectors.put("myoqcgYiehufrsnnkqdqbp69dddVDMopJu", "6fc8a3c2a09a298592c3e180f02487cd91ba3400b5");
    testVectors.put("2N7FuwuUuoTBrDFdrAZ9KxBmtqMLxce9i1C", "c499b31df7c9068d1481b596578ddbb4d3bd90baeb");
    testVectors.put("5KL6zEaMtPRXZKo1bbMq7JDjjo1bJuQcsgL33je3oY8uSJCR5b4", "80c7666842503db6dc6ea061f092cfb9c388448629a6fe868d068c42a488b478ae");
    testVectors.put("KwV9KAfwbwt51veZWNscRTeZs9CKpojyu1MsPnaKTF5kz69H1UN2", "8007f0803fc5399e773555ab1e8939907e9badacc17ca129e67a2f5f2ff84351dd01");
    testVectors.put("93N87D6uxSBzwXvpokpzg8FFmfQPmvX4xHoWQe3pLdYpbiwT5YV", "efea577acfb5d1d14d3b7b195c321566f12f87d2b77ea3a53f68df7ebf8604a801");
    testVectors.put("cMxXusSihaX58wpJ3tNuuUcZEQGt6DKJ1wEpxys88FFaQCYjku9h", "ef0b3b34f0958d8a268193a9814da92c3e8b58b4a4378a542863e34ac289cd830c01");
    testVectors.put("13p1ijLwsnrcuyqcTvJXkq2ASdXqcnEBLE", "001ed467017f043e91ed4c44b4e8dd674db211c4e6");
    testVectors.put("3ALJH9Y951VCGcVZYAdpA3KchoP9McEj1G", "055ece0cadddc415b1980f001785947120acdb36fc");
    //
    for (final Map.Entry<String, String> entry : testVectors.entrySet()) {
      try {
        final byte[] result = Base58Check.decode(entry.getKey());
        Assert.assertArrayEquals(entry.getKey(), Util.fromHexString(entry.getValue()), result);
      } catch (final DecodingException | IllegalArgumentException e) {
        Assert.assertEquals(entry.getKey(), entry.getValue(), e.getMessage());
      }
    }
  }

  @Test
  public void test_decodeBase58() {
    final Map<String, String> testVectors = new OneShotLinkedHashMap<>();
    // these test vectors copied from Bitcoin Core /bitcoin/src/test/data/base58_encode_decode.json
    testVectors.put("", "");
    testVectors.put("2g", "61");
    testVectors.put("a3gV", "626262");
    testVectors.put("aPEr", "636363");
    testVectors.put("2cFupjhnEsSn59qHXstmK2ffpLv2", "73696d706c792061206c6f6e6720737472696e67");
    testVectors.put("1NS17iag9jJgTHD1VXjvLCEnZuQ3rJDE9L", "00eb15231dfceb60925886b67d065299925915aeb172c06647");
    testVectors.put("ABnLTmg", "516b6fcd0f");
    testVectors.put("3SEo3LWLoPntC", "bf4f89001e670274dd");
    testVectors.put("3EFU7m", "572e4794");
    testVectors.put("EJDM8drfXA6uyA", "ecac89cad93923c02321");
    testVectors.put("Rt5zm", "10c8511e");
    testVectors.put("1111111111", "00000000000000000000");
    //
    testVectors.put("1", "00");
    testVectors.put("1111", "00000000");
    testVectors.put("1112", "00000001");
    testVectors.put("115S", "00000101");
    testVectors.put("1LZN", "00010101");
    testVectors.put("2VKqi", "01010101");
    testVectors.put("2UzHM", "01000000");
    testVectors.put("7YXq9G", "ffffffff");
    testVectors.put("3QJmnh", "5df6e0e2");
    testVectors.put("11111", "0000000000");
    testVectors.put("17YXq9G", "00ffffffff");
    testVectors.put("2", "01");
    testVectors.put("z", "39");
    testVectors.put("21", "3a");
    testVectors.put("121", "003a");
    testVectors.put("1121", "00003a");
    testVectors.put("1Wh4bh", "001406e058");
    testVectors.put("VrZDWwe", "ffc0b057f5");
    //
    for (final Map.Entry<String, String> entry : testVectors.entrySet()) {
      try {
        final byte[] result = Base58Check.decodeBase58(entry.getKey());
        Assert.assertArrayEquals(entry.getKey(), Util.fromHexString(entry.getValue()), result);
      } catch (final DecodingException e) {
        Assert.assertEquals(entry.getKey(), entry.getValue(), e.getMessage());
      }
    }
  }

  @Test
  public void test_encode() {
    final Map<String, String> testVectors = new OneShotLinkedHashMap<>();
    testVectors.put(null, null);
    testVectors.put(new String(new char[4097 * 2]).replace('\0', '0'), null);
    testVectors.put("", "3QJmnh");
    testVectors.put("00", "1Wh4bh");
    testVectors.put("01", "BXvDbH");
    testVectors.put("ff", "VrZDWwe");
    testVectors.put("39", "7VsrQCP"); // 57 in base 10
    testVectors.put("3a", "7ZRwjEn"); // 58 in base 10
    testVectors.put("0000", "112edB6q");
    testVectors.put("0001", "18AV53K");
    testVectors.put("0100", "VvpVbFE");
    testVectors.put("0101", "W3FewuX");
    testVectors.put("00ff", "1VpBd9rE");
    testVectors.put("0039", "17W4smkQ");
    testVectors.put("003a", "17befNKF");
    //
    testVectors.put("000000000000000000000000000000000000000000", "1111111111111111111114oLvT2"); // version 0 + 20 zero bytes (size of hash160)
    testVectors.put("00ffffffffffffffffffffffffffffffffffffffff", "1QLbz7JHiBTspS962RLKV8GndWFwi5j6Qr"); // version 0 + 20 0xff bytes (size of hash160)
    testVectors.put("00b4371442", "1X9K92G8rUa3"); // sha256d of this value has four leading zero bytes, thus the computed checksum is zero
    testVectors.put(new String(new char[193 * 2]).replace('\0', '0'), "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111114w6D"); // version 0 + 192 zero bytes results in checksum with one leading zero
    testVectors.put(new String(new char[4096 * 2]).replaceo5QxD"); // max allowable length
    testVectors.put(new String(new char[4096 * 2]).replace('\0', 'f'), "3F17WME3gTqVTn9uW9Y15YCP4K3BknqKEUXVSYVDSncHp1ndfGZeRkTzZkb9rDyyEczAUf9jHoqJbc2bQ5oiDyNFk1U3ByQz49YdPL7yvzKkWQx8aHSCSbsycbbeP7ddjELnM41aMo9aBPLxbmypgxK85Mycq7cxDnipGzYiWuEzhVk3Y8omiypX9tEos7aQCxMjQkSDiMJVTK291xo2WpPkpQvTM5jxPq7aGjtMsquzvYhJwWdCsU6Hwxc8tguLw6ZSn4kDRnvaR3yd9UAdT4B6toV5T2hWkHzBqec2k6qJZxXD7Ep8x7ZLXL3Z9aaDzw7aaR1TVxEd5nVsRorCatnyq5DbUtcQCysupQBqr3d4jFKdYWzqEo6SMSgDC2grTWQ7CdJoH4XXj97CerDnbqhNo4YRwVbb6BLKV5WEFcYWqZpNP1Z82mHe1tdmVKuzESXKBxtKcmM8TCv6vLCiqz4sgNmCnL6iEmizdXMfQiMLyDFNJMZchFjLyvWwQVFg3VQWJUaes3CQA4aKh8Hfp9NLv7xRzuk1LN3CEbHmmzhJcUijFYCkoCewKF3WauQ5oqSWN76DH88tG2v2LpQkXpZzZFTM4t4RmvupqrHYkWWdG1o8BZUpeCKHhoX3nQeRQewarVXi8HLEfgZtZ6wEYLEHrBjXjqSfEHvyZYUGXfYzWe4ZitrCiEsV8UsSw6ZW6wZhCDYQwGFaXtXDaYk8SR3cGzo68KxGmSNdVfeAiJWNrkowVgZB9Tq5WCwswbXCx7CNHVbogWXdUbovhaacdN3tLqrPHhPSPo7zsjbqf2WZBNBJRYce1UA1qZ1meZGk4aUrj314kNRR7acnjEzpVnPycin2hjH3xyBgtZr69fgAL8cGHjob3WPDTRvhtLWjnzubFTrkP18uPnq6o2ZkzHLpRb4RQu6vUcnKWt5sJdNGu1WSc42azja9GoCMXMhvM8zKUVC6JGuEX9df5qjtWhrNPn2eD4xn82MY4yDjnvM6vR5roEL1LFR1n8Bp4GnR6tfywbifQkDUbbk7b6thFwxseBkSbphsBGNETxyYWJYc25Rtf3o9PAywdHKczH1ABUjms77EQovRk2aYb1RfLVpwkWycjBEEpjyCb6g8aiEZyYEkgtBZP9NPPZnQu1vZodAjuj9GEnSL9PKzRDkRdKiei7wwa8HQ1SYhSGRpktXjjGH6eYYFg1seF1HSGgYyxejrf3YiS7hyQKu14d22cRJp5XtTs1ePou4ipsqSfLS4HWNd5DzZ5sSPbUUC2NM3MuT15BBEAryBDK6XFJcNR6NcyJrRUinDjsNxD1NNfejspoTSNwfE72nrj6wVTxQbD23S9L6nfV93PaaEk9gFtHKA2qQmDTNcYFSYJVGHonW3s3LiqL9KAvTTAagv6eMbi3Tt1XuASGvaFw1cG4kizDedrdzRBUpHmQ61zCct1c7es2szRDLG78kRGfWQNs1ZQT4YJiHNcNJXCkgiERrUgcmK6EHogHubkp3de4YbsK9BXD5VUhjLYsopftz6WuyycLWn3LRCvZgqzxb3avaFtjeCfzEZt1F5kjtMo23SKNuMmgUDckzxVsE4YdjJeHZT7MUWx91ZmnZsWxUyJ3qZRm67KoTA3sqTHkJeQxYXy5momzVcaWYuAHfuHnvTkMC8CC5wEzwpzj3vY21EA4DvYcagWzF4YrToLRhcqaDkWsZEMVd4wyHmwfapA5qHKawk6rUHhrs7CC5t2ssmfkVAYufJD38vyW12W5hCp6Jmgo1kjGZb7yZDigUC6g2t37HEypVBo1iEApBVJLLeyUaoY4fB1hLcWmX8SsGKu6pfymBDjJKfHxuJFURB3P53ekPz4SJzyPnw22NPzVcQsMCc4J4NFVZRrb6jzER2TUmzWjs4tt75LsETcdkU2EFaG4yiVAiYxU4iErR8PEni34bZsCuqHW5HHuqeHhM3kjSFokNuDYAWjBhM3k97vXsRtmVj1crbx8e4Z25tktgz8nzBGtHiy8rnoWYkEJvq8aSe9ZZmVXPbhcjiBoUKkWjMwiWe6AMnktsqw1TpH6kRBpPdCFxsvY4LhJb7fYk9wsFo7CkNr9gwMMQTvpzUzsNjXsB987J2S71XqCrNsUDLpuju2vSa8wugrL15CUXcTTK7Xvj6Be9yY58vj6Vd75uWcC25cdgL5TMYMH4iNcg1nD2FBpBKKTwZwQCQSwzbJJ2z9QceyPi9BABHjYoWrTbfomJ6woRSap1ax9QnrwcSjjNDf9zwq7YsJcJfLR4GSMWj3Jf4EsDp8faAoQyxbZGiBJXJfDcrQHfgMP8iTTMunbvvxiP9DwCraoxuiuofbVR5vWNjxJkaYWLUvt8V95T3sJsVCBw33ToUnnBshmRW33wSjqHvREQEACZRsPPudjw762FGc4XhtwicNEPSzewf2182uhaFsfcT5bkqNCurxbKmzSGdfKK7YFV8u2JFnhGWQ9KReBQzJ4ZvpYwuXPhX9mMcobskfhD5bKw61XX7oVvqVCEw4diGM3RHDwWxf9isPWPBujviMzkAcQhNS5GmzHZ6vLLL3tbDCJ7pr6TLHPgdpRV3zwTngRUuokYciLRgZaFBHJNWq32fmZ6ud8g9GTVgGWN4aV4apF1KmivouQ2b9YtxamGB7W6bxYiA6b5UnBbPS7rGaAVxrSQPc99j3cQLpEf4JG7bx1YzLqHUDFNZ4b7H6N9ef1uoVpMxyb5ZztirUtWTBZh8P89kQw2mNjesqQwiEG8j6ESqSWYXVM5K7jdJP2i4ASDp5iuZFnmTrvrrzz2A3gW7hGfqDQ3bmgM5M2ZNzkBqrQPYmxtL3th8CRzu4suWQkUtm9nm9D3Rfd7GhTwRzoMcBSiEgAVVwbDt2iVh2cwpThupjZzkjeHcmrZKJLaUVoWJxvgFAhWngmYXTUYs2bvktiF6rZhYg7DYx29FB4eMW1QgAkFZoiPYjqxwGjfAzuN9mFxDYzYDapLxWSwDomBikrEreGZUTE5aj2ZmADFjF93q1qF5pSa87VzJuTPFghiycuMrUEuyBhDcc72qofNniAvDKLp8ymf3a6H4sGNjHPDdut6N3en1sQcRkUzxa6r6zJUnFoi9VFe5Vh46Wv6ErpeR9q7h8fzztQkWoahd9NbPpeSBUic6oocdDyx7ndZsjxsyMkFLexqVsgJFsNkRnV6JcN46cBYgyuXBL1MEmeGkKUGwrKft178NwGrAjGZ5PLzxMEVYjSjeDJdvAwxFBDn68zmFMKTT4xVjQEWcgzghQ4AckrSfUWnUB3FjwdtjdnK7nKGdhisrToMgvGHNho7FYhHHYyqgvfFGqZSeuBfRUwd6Q8ttB5ifVacYpyRvPN4SvufDQC7fsxGv1aHWN8HK48Bks6J2FqhAHuAW93fU7cwsUH6r6nBbmbDgVcSJhJjy9HNQW35uRoPxipM1NLqzAKxtJjuX8enj39TX5uvJzeWZ4yUFUQzXvv3cAsAay8YsQpihpT3ATatwdCtBgZuNJmA6QRnZZFkvG17uUgCMN5LpHfCvATnUXXqkEVJmSU7mtTpV53qiLCF8BCVcuYbb9Pc7CMHnZjkkrSA914D8Gm7cQCTgu9LxuQRSxLX5X2pvBdn1DPkoY8jYcHfbmZKzhkn6GLX5DfiBXRBVjyai5aNfpxAh9qYhzw66PoE2jZCMEbxMjWJHpFDKNxDJdZtJhXTdHMi5wFTon6ondU1bpPqtuDsuCWQ2Mmx6s5ZAHZEYBgGJhSshGs96srrmqag6WgSNoLYgiZZQfurRZHE6XSSYAsWucKxr9GVJcJGtF8pvHZsSzKmyCmCn2yFrCRYqpGiPLncQmZm1f31KSd5baYqmJeGPPqUkM9tyFKwot1Pec5DSXQ6bHvf2oRGYj9aqk1s9nDBkeTJwKgoGSdsyZbJHTsw55NhZSB2NAqzXux1b7zkPcjTey1koVpuyFjcFTn8k3GPV6AjCdjeajFwJQGP3cM5ErVHYbeMwTKoShBkn1UXG1rM6Wcuw1CAcumKjbuThySkKZX2UoRNShsDCdVevQRu6R7rVhkoF372HfZ4JuJSt9okeWxPzAiXreJgUtbMxKDmRuL3GBLEdyF6KZYinKCDW6DTU12FkbJnb8ApRUF2GNrQ3R9JG3Sxm9NKNMvLuLWbwLsfgRHjqS82F32fW25nwx1XNRMHdxxr7DnLncNihECr3wDda6MdmqC48iKVWK2oPdQHoPQLcqKAUTz4bGz5Yc81znTLKh9LRoGhqXqfvzQkNjzL7qAewcCDkwAUc52ngxzYJkF1LrmpPqt7M9q5gLSZJVNJeVbzd2VtcqkQQzGvfxRGPZqewQFjSS3VrGjNqcfb9z2WQiHa8G9o5dbr7SEfVmMBj9VxojYpcSivDXsn1CLZYSJjp2fns8kK4xfiEmM8dMtFHPZoUyRPCZnHipRcCciKzFohLNX859GJ25UaR1eX1zucobb8P2q1UYGkbKf2K33HP89sjhPrSuQx3mWePMbSRP1ustAUcYpBL9yMqkQLXCupHpNXcWaGtSyJNzEaCe77ku8pR5fnR4VbS2U9B5N2AfuLBWfHDY17iQdbuQpZbEX1W5ZWDfEnvggZU9GhLF2pjjSZntgt5Htf2uHgpzfNpjyGhEXTRMb47fiXoULvnX4jK3gequM33mdTycxGppo5RH1rouFcpBii8Bkd4mCLy8m1aeDq6zJYfukXc5YjjiMBwC15AE8C1ZZJY14y8HUgrG6QFzcW3ZJaQj15rcRozmQto86kuYWaNktVKskq5VxqzEuKY5dS3hdNZs7a8eFYKVndkzC7HeGz6FnKM7Ywk7Rp573q15QDMXpSE96nhV4n9yY1jAwBVZjX8JA78389hPCjC2ksyaLu92qAn89zryGaaQp6E3gYKDnGn2GDnABmfdFJvvTBjbnixLkGHpemjfcJ48ndomYQQE5m9diQjm95tY8DqHrViQijzzK9xBUBgSDesrj5hHsftqhvwW6n7XHRHPNoZkKvGYZ7cN5cmbK7up2BnzWfTPAtg7qXhzinn7pyWdeskfBTpNe5vReDfMCxncHyR5yDHELnXdRjCYGaorgJZwp6khgT1Wj1xU5mib3RbjzMtW6QQ5VMPpj7LLXcVNvTJexeTi4nYZG2NvMDPSzgEwPh3XKX9V7YpB8vCj5vts3phqBCtELjbpkU6NeQfxDCdwkx9KfowAnD9ni7ihG4nypsg7P4sgk1PBKkEf7tkyY1dGK2Gz82fZ6yuN31kqe7N6NagE4qwhD5Yis652fuoCxmojMEEGXjUKXrnnkHn5hDcRmetRHH6UuyHYu4STKNSgDBu83T2RQqT6xFXHSP57Ma5Mk8uWQKVzXVMJHpgQKpfVdeNm6Txh2RvLQo5vqQK7VmRy9mmt4HtFPKYn478scErdrohfaLtBUWBqF6bqowwBGoHNKB45n66Xvaq6ujN7Msgjq6RB4a7DzKbE7AxzCgLHPr4Dn9objW5ysCP7hxfyDSAHWFRbaigBov9iGnKvifZjHeMQJ7GWXwjdZiFTnaDw7jeSpUrUeY6S7fgWNNoqCd4BfLnLcpVN7XQ7BEHjr36p5W1PkJ76hij"); // max allowable length with all bits set
    //
    testVectors.put("0051d853a46c1e4e5490d774e4c6ead143168ecaf6", "18TktBbxTJxGjKnN25xLXGmqVRutGRcWUW"); // main net p2pkh compressed (generated key)
    testVectors.put("0015577faf5ac933c1c48f15f04db35e1707e02986", "12wr1YsbCnj3U5PyrMXZ87ZX6GkVhBeXV4"); // main net p2pkh uncompressed
    testVectors.put("80fced6d7a8592042fcf2bd1ded8d0fa559c6de95668b60a9d4537e321607654da01", "L5hNLtFov4mXzqToWDnvK64UJPGaBLaF7zbgLG6HAaEpCE2PRyvH"); // main net private key compressed
    testVectors.put("80fced6d7a8592042fcf2bd1ded8d0fa559c6de95668b60a9d4537e321607654da", "5KjgGqKJszVfk1ZMWH3FLxXEtWy6FaSCou24UUSDGmEYzUTFTDD"); // main net private key uncompressed
    testVectors.put("051608ea6163a45501c5ab6b1f40d8c30a81347bd2", "33hXUE8YFazwf4vscckfBh7FNwWXGeEH5R"); // main net p2sh (p2sh-segwit of previous key)
    //
    testVectors.put("0000847d60b26f3243df1dc2c22087b6f270e4680e", "113jiYt8VVPsKoiTj7pNJn4xezbwCzzSnn"); // main net p2pkh compressed (generated key with a leading zero in one of its public key hashes)
    testVectors.put("0066be7089201685a69d3dd11bb864ee42608b2ee0", "1ANG4YQnQBNwRXJDHpTVV9gd7JGFWgXDU5"); // main net p2pkh uncompressed
    testVectors.put("80ae871112a654ad2b0062e9c4627badb2bc782e3f9a425d7b360a0305d1d7e32101", "L34yCT7grP6jekoFcPVGueCHouxc4idoSh5FBzSTRqeCAyWh2g3Y"); // main net private key compressed
    testVectors.put("80ae871112a654ad2b0062e9c4627badb2bc782e3f9a425d7b360a0305d1d7e321", "5K99ewQGNcNEjzW4JzCqvALKmAHDvrm8obucqi7DnW9RjhNZJvY"); // main net private key uncompressed
    testVectors.put("0528c1f761b60df6771e6906082f598b01492d4dcd", "35QXKEY1mxrPgjg3zJaAANjnjA8aRseTCJ"); // main net p2sh (p2sh-segwit of previous key)
    //
    testVectors.put("00751e76e8199196d454941c45d1b3a323f1433bd6", "1BgGZ9tcN4rm9KBzDn7KprQz87SZ26SAMH"); // main net p2pkh compressed (smallest valid private key)
    testVectors.put("0091b24bf9f5288532960ac687abb035127b1d28a5", "1EHNa6Q4Jz2uvNExL497mE43ikXhwF6kZm"); // main net p2pkh uncompressed (smallest valid private key)
    testVectors.put("80000000000000000000000000000000000000000000000000000000000000000101", "KwDiBf89QgGbjEhKnhXJuH7LrciVrZi3qYjgd9M7rFU73sVHnoWn"); // main net private key compressed (smallest valid private key)
    testVectors.put("800000000000000000000000000000000000000000000000000000000000000001", "5HpHagT65TZzG1PH3CSu63k8DbpvD8s5ip4nEB3kEsreAnchuDf"); // main net private key uncompressed (smallest valid private key)
    testVectors.put("05bcfeb728b584253d5f3f70bcb780e9ef218a68f4", "3JvL6Ymt8MVWiCNHC7oWU6nLeHNJKLZGLN"); // main net p2sh (p2sh-segwit of smallest valid private key)
    //
    testVectors.put("00adde4c73c7b9cee17da6c7b3e2b2eea1a0dcbe67", "1GrLCmVQXoyJXaPJQdqssNqwxvha1eUo2E"); // main net p2pkh compressed (largest valid private key)
    testVectors.put("00bec08011c9e76dcc42e739a2d7752c2e3ac86e6e", "1JPbzbsAx1HyaDQoLMapWGoqf9pD5uha5m"); // main net p2pkh uncompressed (largest valid private key)
    testVectors.put("80fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414001", "L5oLkpV3aqBjhki6LmvChTCV6odsp4SXM6FfU2Gppt5kFLaHLuZ9"); // main net private key compressed (largest valid private key)
    testVectors.put("80fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140", "5Km2kuu7vtFDPpxywn4u3NLpbr5jKpTB3jsuDU2KYEqetqj84qw"); // main net private key uncompressed (largest valid private key)
    testVectors.put("0548cc1845ab9f5099d4b36f02e148f7459d439fee", "38Kw57SDszoUEikRwJNBpypPSdpbAhToeD"); // main net p2sh (p2sh-segwit of largest valid private key)
    //
    testVectors.put("0488ade40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001", "xprv9s21ZrQH143K24Mfq5zL5MhWK9hUhhGbd45hLXo2Pq2oqzMMo63oStZzF93Y5wvzdUayhgkkFoicQZcP3y52uPPxFnfoLZB21TeqtDeZVxb"); // main net bip32 extended private key
    testVectors.put("0488b21e00000000000000000000000000000000000000000000000000000000000000000000000000000000000279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "xpub661MyMwAqRbcEYS8w7XLSVeEsBXy79zSzH1J8vCdxAZningWLdN3zgtU6QzvJsNBNF5QPBBBg1yVF2LKrcfGdJq86PeLWDMUCYatZPzQu8R"); // main net bip32 extended public key
    //
    testVectors.put("6f51d853a46c1e4e5490d774e4c6ead143168ecaf6", "mnyiBEgwGLPXWSFyjeviMBzAMRWbCEDgnF"); // test net p2pkh compressed (generated key)
    testVectors.put("6f15577faf5ac933c1c48f15f04db35e1707e02986", "mhToJbxa1pAJFBsbZvVvx2mqxGMCeJhFvL"); // test net p2pkh uncompressed
    testVectors.put("effced6d7a8592042fcf2bd1ded8d0fa559c6de95668b60a9d4537e321607654da01", "cW4MooFfM8ToAGw4tdc3gQZXvcZyqnfwC2k9SgYnfgtpSy6ULzFk"); // test net private key compressed
    testVectors.put("effced6d7a8592042fcf2bd1ded8d0fa559c6de95668b60a9d4537e321607654da", "93WJra8rUDZoi54e8cwADZ5CYBKoQjyQ9qt1Z6nicVybmQxBSJ3"); // test net private key uncompressed
    testVectors.put("c41608ea6163a45501c5ab6b1f40d8c30a81347bd2", "2MuFjXy4Zs3WHrrZRHkNXoe6WbHihAUejNJ"); // test net p2sh (p2sh-segwit of previous key)
    //
    testVectors.put("6f00847d60b26f3243df1dc2c22087b6f270e4680e", "mfZh1by7JWq86vC5Sgnk8hHHWzCeAtGetv"); // test net p2pkh compressed (generated key with a leading zero in one of its public key hashes)
    testVectors.put("6f66be7089201685a69d3dd11bb864ee42608b2ee0", "mptDMbVmDCpCCdmq1PRsK4twyHrxT7hosu"); // test net p2pkh uncompressed
    testVectors.put("efae871112a654ad2b0062e9c4627badb2bc782e3f9a425d7b360a0305d1d7e32101", "cTRxfN7YHSnzpCGWzoJQGxhMS9G1jAjVWjDiJQtxvxJCRiaJxbt4"); // test net private key compressed
    testVectors.put("efae871112a654ad2b0062e9c4627badb2bc782e3f9a425d7b360a0305d1d7e321", "92unEgDoxqSNi41LwL6knktHQpdw62JL9YmZvLTj8EtUWfz518j"); // test net private key uncompressed
    testVectors.put("c428c1f761b60df6771e6906082f598b01492d4dcd", "2MvxjNyU3PRMjtXJbfSC2nKj3wWLk8WUyh5"); // test net p2sh (p2sh-segwit of previous key)
    //
    testVectors.put("6f751e76e8199196d454941c45d1b3a323f1433bd6", "mrCDrCybB6J1vRfbwM5hemdJz73FwDBC8r"); // test net p2pkh compressed (smallest valid private key)
    testVectors.put("6f91b24bf9f5288532960ac687abb035127b1d28a5", "mtoKs9V381UAhUia3d7Vb9GNak8Qvmcsme"); // test net p2pkh uncompressed (smallest valid private key)
    testVectors.put("ef000000000000000000000000000000000000000000000000000000000000000101", "cMahea7zqjxrtgAbB7LSGbcQUr1uX1ojuat9jZodMN87JcbXMTcA"); // test net private key compressed (smallest valid private key)
    testVectors.put("ef0000000000000000000000000000000000000000000000000000000000000001", "91avARGdfge8E4tZfYLoxeJ5sGBdNJQH4kvjJoQFacbgwmaKkrx"); // test net private key uncompressed (smallest valid private key)
    testVectors.put("c4bcfeb728b584253d5f3f70bcb780e9ef218a68f4", "2NAUYAHhujozruyzpsFRP63mbrdaU5wnEpN"); // test net p2sh (p2sh-segwit of smallest valid private key)
    //
    testVectors.put("6fadde4c73c7b9cee17da6c7b3e2b2eea1a0dcbe67", "mwNHVpaPLqQZJgrv8CpFhJ4GpvJGumskXi"); // test net p2pkh compressed (largest valid private key)
    testVectors.put("6fbec08011c9e76dcc42e739a2d7752c2e3ac86e6e", "mxuZHex9m2jEMKtR3vZCLC2AX9QuyLzj7L"); // test net p2pkh uncompressed (largest valid private key)
    testVectors.put("effffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036414001", "cWALDjUu1tszsCBMjBjL4mhYj2wHUWYDR8Q8aSjLKzjkW5eBtpzu"); // test net private key compressed (largest valid private key)
    testVectors.put("effffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140", "93XfLeifX7KMMtUGa7xouxtnFWSSUyzNPgjrJ6Npsyahfqjy7oJ"); // test net private key uncompressed (largest valid private key)
    testVectors.put("c448cc1845ab9f5099d4b36f02e148f7459d439fee", "2Myt98rNFVTJpSWNycRz4Svoeez2kzgwFGP"); // test net p2sh (p2sh-segwit of largest valid private key)
    //
    testVectors.put("043583940000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001", "tprv8ZgxMBicQKsPcsbCVeqqF1KVdH7gwDJbxbzpCxDUsoXHdb6SnTPYxdwSAKDC6KKJzv7khnNWRAJQsRA8BBQyiSfYnRt6zuu4vZQGKqgeFia"); // test net bip32 extended private key
    testVectors.put("043587cf00000000000000000000000000000000000000000000000000000000000000000000000000000000000279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "tpubD6NzVbkrYhZ4WLczPJWReQycCJdd6YVWXubbVUFnJ5KgU5MDQrD998ZJLT5hqNKRA9cJzkh4D7oXwCpwFUWWWkHR9zPeBk1hnWBJKNhyYsn"); // test net bip32 extended public key
    // these test vectors copied from Bitcoin Core /bitcoin/src/test/data/base58_keys_valid.json
    testVectors.put("0065a16059864a2fdbc7c99a4723a8395bc6f188eb", "1AGNa15ZQXAZUgFiqJ2i7Z2DPU2J6hW62i");
    testVectors.put("0574f209f6ea907e2ea48f74fae05782ae8a665257", "3CMNFxN1oHBc4R1EpboAL5yzHGgE611Xou");
    testVectors.put("6f53c0307d6851aa0ce7825ba883c6bd9ad242b486", "mo9ncXisMeAoXwqcV5EWuyncbmCcQN4rVs");
    testVectors.put("c46349a418fc4578d10a372b54b45c280cc8c4382f", "2N2JD6wb56AfK4tfmM6PwdVmoYk2dCKf4Br");
    testVectors.put("80eddbdc1168f1daeadbd3e44c1e3f8f5a284c2029f78ad26af98583a499de5b19", "5Kd3NBUAdUnhyzenEwVLy9pBKxSwXvE9FMPyR4UKZvpe6E3AgLr");
    testVectors.put("8055c9bccb9ed68446d1b75273bbce89d7fe013a8acd1625514420fb2aca1a21c401", "Kz6UJmQACJmLtaQj5A3JAge4kVTNQ8gbvXuwbmCj7bsaabudb3RD");
    testVectors.put("ef36cb93b9ab1bdabf7fb9f2c04f1b9cc879933530ae7842398eef5a63a56800c2", "9213qJab2HNEpMpYNBa7wHGFKKbkDn24jpANDs2huN3yi4J11ko");
    testVectors.put("efb9f4892c9e8282028fea1d2667c4dc5213564d41fc5783896a0d843fc15089f301", "cTpB4YiyKiBcPxnefsDpbnDxFDffjqJob8wGCEDXxgQ7zQoMXJdH");
    testVectors.put("006d23156cbbdcc82a5a47eee4c2c7c583c18b6bf4", "1Ax4gZtb7gAit2TivwejZHYtNNLT18PUXJ");
    testVectors.put("05fcc5460dd6e2487c7d75b1963625da0e8f4c5975", "3QjYXhTkvuj8qPaXHTTWb5wjXhdsLAAWVy");
    testVectors.put("6ff1d470f9b02370fdec2e6b708b08ac431bf7a5f7", "n3ZddxzLvAY9o7184TB4c6FJasAybsw4HZ");
    testVectors.put("c4c579342c2c4c9220205e2cdc285617040c924a0a", "2NBFNJTktNa7GZusGbDbGKRZTxdK9VVez3n");
    testVectors.put("80a326b95ebae30164217d7a7f57d72ab2b54e3be64928a19da0210b9568d4015e", "5K494XZwps2bGyeL71pWid4noiSNA2cfCibrvRWqcHSptoFn7rc");
    testVectors.put("807d998b45c219a1e38e99e7cbd312ef67f77a455a9b50c730c27f02c6f730dfb401", "L1RrrnXkcKut5DEMwtDthjwRcTTwED36thyL1DebVrKuwvohjMNi");
    testVectors.put("efd6bca256b5abc5602ec2e1c121a08b0da2556587430bcf7e1898af2224885203", "93DVKyFYwSN6wEo3E2fCrFPUp17FtrtNi2Lf7n4G3garFb16CRj");
    testVectors.put("efa81ca4e8f90181ec4b61b6a7eb998af17b2cb04de8a03b504b9e34c4c61db7d901", "cTDVKtMGVYWTHCb1AFjmVbEbWjvKpKqKgMaR3QJxToMSQAhmCeTN");
    testVectors.put("007987ccaa53d02c8873487ef919677cd3db7a6912", "1C5bSj1iEGUgSTbziymG7Cn18ENQuT36vv");
    testVectors.put("0563bcc565f9e68ee0189dd5cc67f1b0e5f02f45cb", "3AnNxabYGoTxYiTEZwFEnerUoeFXK2Zoks");
    testVectors.put("6fef66444b5b17f14e8fae6e7e19b045a78c54fd79", "n3LnJXCqbPjghuVs8ph9CYsAe4Sh4j97wk");
    testVectors.put("c4c3e55fceceaa4391ed2a9677f4a4d34eacd021a0", "2NB72XtkjpnATMggui83aEtPawyyKvnbX2o");
    testVectors.put("80e75d936d56377f432f404aabb406601f892fd49da90eb6ac558a733c93b47252", "5KaBW9vNtWNhc3ZEDyNCiXLPdVPHCikRxSBWwV9NrpLLa4LsXi9");
    testVectors.put("808248bd0375f2f75d7e274ae544fb920f51784480866b102384190b1addfbaa5c01", "L1axzbSyynNYA8mCAhzxkipKkfHtAXYF4YQnhSKcLV8YXA874fgT");
    testVectors.put("ef44c4f6a096eac5238291a94cc24c01e3b19b8d8cef72874a079e00a242237a52", "927CnUkUbasYtDwYwVn2j8GdTuACNnKkjZ1rpZd2yBB1CLcnXpo");
    testVectors.put("efd1de707020a9059d6d3abaf85e17967c6555151143db13dbb06db78df0f15c6901", "cUcfCMRjiQf85YMzzQEk9d1s5A4K7xL5SmBCLrezqXFuTVefyhY7");
    testVectors.put("00adc1cc2081a27206fae25792f28bbc55b831549d", "1Gqk4Tv79P91Cc1STQtU3s1W6277M2CVWu");
    testVectors.put("05188f91a931947eddd7432d6e614387e32b244709", "33vt8ViH5jsr115AGkW6cEmEz9MpvJSwDk");
    testVectors.put("6f1694f5bc1a7295b600f40018a618a6ea48eeb498", "mhaMcBxNh5cqXm4aTQ6EcVbKtfL6LGyK2H");
    testVectors.put("c43b9b3fd7a50d4f08d1a5b0f62f644fa7115ae2f3", "2MxgPqX1iThW3oZVk9KoFcE5M4JpiETssVN");
    testVectors.put("80091035445ef105fa1bb125eccfb1882f3fe69592265956ade751fd095033d8d0", "5HtH6GdcwCJA4ggWEL1B3jzBBUB8HPiBi9SBc5h9i4Wk4PSeApR");
    testVectors.put("80ab2b4bcdfc91d34dee0ae2a8c6b6668dadaeb3a88b9859743156f462325187af01", "L2xSYmMeVo3Zek3ZTsv9xUrXVAmrWxJ8Ua4cw8pkfbQhcEFhkXT8");
    testVectors.put("efb4204389cef18bbe2b353623cbf93e8678fbc92a475b664ae98ed594e6cf0856", "92xFEve1Z9N8Z641KQQS7ByCSb8kGjsDzw6fAmjHN1LZGKQXyMq");
    testVectors.put("efe7b230133f1b5489843260236b06edca25f66adb1be455fbd38d4010d48faeef01", "cVM65tdYu1YK37tNoAyGoJTR13VBYFva1vg9FLuPAsJijGvG6NEA");
    testVectors.put("00c4c1b72491ede1eedaca00618407ee0b772cad0d", "1JwMWBVLtiqtscbaRHai4pqHokhFCbtoB4");
    testVectors.put("05f6fe69bcb548a829cce4c57bf6fff8af3a5981f9", "3QCzvfL4ZRvmJFiWWBVwxfdaNBT8EtxB5y");
    testVectors.put("6f261f83568a098a8638844bd7aeca039d5f2352c0", "mizXiucXRCsEriQCHUkCqef9ph9qtPbZZ6");
    testVectors.put("c4e930e1834a4d234702773951d627cce82fbb5d2e", "2NEWDzHWwY5ZZp8CQWbB7ouNMLqCia6YRda");
    testVectors.put("80d1fab7ab7385ad26872237f1eb9789aa25cc986bacc695e07ac571d6cdac8bc0", "5KQmDryMNDcisTzRp3zEq9e4awRmJrEVU1j5vFRTKpRNYPqYrMg");
    testVectors.put("80b0bbede33ef254e8376aceb1510253fc3550efd0fcf84dcd0c9998b288f166b301", "L39Fy7AC2Hhj95gh3Yb2AU5YHh1mQSAHgpNixvm27poizcJyLtUi");
    testVectors.put("ef037f4192c630f399d9271e26c575269b1d15be553ea1a7217f0cb8513cef41cb", "91cTVUcgydqyZLgaANpf1fvL55FH53QMm4BsnCADVNYuWuqdVys");
    testVectors.put("ef6251e205e8ad508bab5596bee086ef16cd4b239e0cc0c5d7c4e6035441e7d5de01", "cQspfSzsgLeiJGB2u8vrAiWpCU4MxUT6JseWo2SjXy4Qbzn2fwDw");
    testVectors.put("005eadaf9bb7121f0f192561a5a62f5e5f54210292", "19dcawoKcZdQz365WpXWMhX6QCUpR9SY4r");
    testVectors.put("053f210e7277c899c3a155cc1c90f4106cbddeec6e", "37Sp6Rv3y4kVd1nQ1JV5pfqXccHNyZm1x3");
    testVectors.put("6fc8a3c2a09a298592c3e180f02487cd91ba3400b5", "myoqcgYiehufrsnnkqdqbp69dddVDMopJu");
    testVectors.put("c499b31df7c9068d1481b596578ddbb4d3bd90baeb", "2N7FuwuUuoTBrDFdrAZ9KxBmtqMLxce9i1C");
    testVectors.put("80c7666842503db6dc6ea061f092cfb9c388448629a6fe868d068c42a488b478ae", "5KL6zEaMtPRXZKo1bbMq7JDjjo1bJuQcsgL33je3oY8uSJCR5b4");
    testVectors.put("8007f0803fc5399e773555ab1e8939907e9badacc17ca129e67a2f5f2ff84351dd01", "KwV9KAfwbwt51veZWNscRTeZs9CKpojyu1MsPnaKTF5kz69H1UN2");
    testVectors.put("efea577acfb5d1d14d3b7b195c321566f12f87d2b77ea3a53f68df7ebf8604a801", "93N87D6uxSBzwXvpokpzg8FFmfQPmvX4xHoWQe3pLdYpbiwT5YV");
    testVectors.put("ef0b3b34f0958d8a268193a9814da92c3e8b58b4a4378a542863e34ac289cd830c01", "cMxXusSihaX58wpJ3tNuuUcZEQGt6DKJ1wEpxys88FFaQCYjku9h");
    testVectors.put("001ed467017f043e91ed4c44b4e8dd674db211c4e6", "13p1ijLwsnrcuyqcTvJXkq2ASdXqcnEBLE");
    testVectors.put("055ece0cadddc415b1980f001785947120acdb36fc", "3ALJH9Y951VCGcVZYAdpA3KchoP9McEj1G");
    //
    for (final Map.Entry<String, String> entry : testVectors.entrySet()) {
      final byte[] input = (entry.getKey() == null) ? null : Util.fromHexString(entry.getKey());
      try {
        Assert.assertEquals(entry.getKey(), entry.getValue(), Base58Check.encode(input));
      } catch (final IllegalArgumentException e) {
        Assert.assertEquals(entry.getKey(), entry.getValue(), e.getMessage());
      }
    }
  }

  @Test
  public void test_encodeBase58() {
    final Map<String, String> testVectors = new OneShotLinkedHashMap<>();
    // these test vectors copied from Bitcoin Core /bitcoin/src/test/data/base58_encode_decode.json
    testVectors.put("", "");
    testVectors.put("61", "2g");
    testVectors.put("626262", "a3gV");
    testVectors.put("636363", "aPEr");
    testVectors.put("73696d706c792061206c6f6e6720737472696e67", "2cFupjhnEsSn59qHXstmK2ffpLv2");
    testVectors.put("00eb15231dfceb60925886b67d065299925915aeb172c06647", "1NS17iag9jJgTHD1VXjvLCEnZuQ3rJDE9L");
    testVectors.put("516b6fcd0f", "ABnLTmg");
    testVectors.put("bf4f89001e670274dd", "3SEo3LWLoPntC");
    testVectors.put("572e4794", "3EFU7m");
    testVectors.put("ecac89cad93923c02321", "EJDM8drfXA6uyA");
    testVectors.put("10c8511e", "Rt5zm");
    testVectors.put("00000000000000000000", "1111111111");
    //
    testVectors.put("00", "1");
    testVectors.put("00000000", "1111");
    testVectors.put("00000001", "1112");
    testVectors.put("00000101", "115S");
    testVectors.put("00010101", "1LZN");
    testVectors.put("01010101", "2VKqi");
    testVectors.put("01000000", "2UzHM");
    testVectors.put("ffffffff", "7YXq9G");
    testVectors.put("5df6e0e2", "3QJmnh");
    testVectors.put("0000000000", "11111");
    testVectors.put("00ffffffff", "17YXq9G");
    testVectors.put("01", "2");
    testVectors.put("39", "z");
    testVectors.put("3a", "21");
    testVectors.put("003a", "121");
    testVectors.put("00003a", "1121");
    testVectors.put("001406e058", "1Wh4bh");
    testVectors.put("ffc0b057f5", "VrZDWwe");
    //
    for (final Map.Entry<String, String> entry : testVectors.entrySet()) {
      Assert.assertEquals(entry.getKey(), entry.getValue(), Base58Check.encodeBase58(Util.fromHexString(entry.getKey())));
    }
  }

  @Test
  public void test_round_trip() {
    final List<String> testVectors = new LinkedList<>();
    testVectors.add("");
    testVectors.add("00");
    testVectors.add("01");
    testVectors.add("ff");
    testVectors.add("000000000000000000000000000000000000000000");
    testVectors.add("00ffffffffffffffffffffffffffffffffffffffff");
    testVectors.add("ffffffffffffffffffffffffffffffffffffffffff");
    testVectors.add("0100");
    testVectors.add("0100000000");
    testVectors.add("01ffffffff");
    testVectors.add("aaaaaaaa");
    testVectors.add("55555555");
    testVectors.add(new String(new char[4096 * 2]).replace('\0', '0')); // max length input all zero bits
    testVectors.add(new String(new char[4096 * 2]).replace('\0', 'f')); // max length input all one bits
    //
    for (final String testVector : testVectors) {
      final byte[] input = Util.fromHexString(testVector);
      try {
        Assert.assertArrayEquals(testVector, input, Base58Check.decode(Base58Check.encode(input)));
      } catch (final DecodingException e) {
        Assert.fail(testVector + ": " + e.getMessage());
      }
    }
  }
}
